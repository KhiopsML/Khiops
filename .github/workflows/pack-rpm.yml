---
name: Create RPM package
on:
  workflow_dispatch:
  push:
    branches: [39-add-learningtest-lite-to-the-repo]
jobs:
  package-rpm:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [rocky8, rocky9]
    container:
      image: ghcr.io/khiopsml/khiops/${{ matrix.os }}:latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: set environment variables
        run: |
          source /etc/os-release 
          echo "ID=$ID" >> "$GITHUB_ENV"
          VERSION=$(echo $PLATFORM_ID | cut -d":" -f2)
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
      - name: Configure CMake
        run: |
          source /etc/profile.d/modules.sh
          module load mpi/mpich-x86_64
          echo "MPI_SUFFIX=$MPI_SUFFIX" >> "$GITHUB_ENV"
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DTESTING=OFF -DBUILD_JARS=ON
      - name: Build Khiops executables
        run: |
          cmake --build build --parallel --target MODL${{ env.MPI_SUFFIX }} MODL_Coclustering${{ env.MPI_SUFFIX }} KhiopsNativeInterface
      - name: Build package with CPack
        run: cd build && cpack -G RPM
      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.ID }}-${{ env.VERSION }}
          path: build/packages/*.rpm
          if-no-files-found: error
  # Test packages on a brand new runner: we want to check the installation process (with the dependencies installation)
  # and the Khiops execution on a simple dataset
  test:
    needs: package-rpm
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [8, 9]
    container:
      image: rockylinux:${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          source /etc/os-release 
          echo "ID=$ID" >> "$GITHUB_ENV"
          VERSION=$(echo $PLATFORM_ID | cut -d":" -f2)
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ID }}-${{ env.VERSION}}
          path: artifacts
      - run: yum update -y
      - name: Install Khiops core
        run: |
          yum install -y ./artifacts/khiops-core* 
      - name: Check Khiops core installation
        run: |
          khiops -v
          khiops_coclustering -v
      - name: Install Khiops (with java)
        run: |
          yum install -y ./artifacts/khiops-*
      - name: Check Khiops installation
        run: |
          khiops -v
          khiops_coclustering -v
      - name: Run Khiops tests
        run: |
          cd test/LearningTest/TestKhiops/Standard/Iris/
          khiops -b -i test.prm -e results/err.txt
          cd -
      - name: Run Khiops Coclustering tests
        run: |
          cd test/LearningTest/TestCoclustering/Standard/Iris/
          khiops_coclustering -b -i test.prm -e results/err.txt
          cd -
      - name: Check results
        run: |-
          yum install python3.11 -y
          touch test/LearningTest/TestCoclustering/Standard/Iris/results/time.log
          touch test/LearningTest/TestKhiops/Standard/Iris/results/time.log
          cd test/LearningTest/cmd/python/
          python3 test_khiops.py Khiops nul Standard
          python3 test_khiops.py Coclustering nul Standard
          python3 apply_command.py errors ../../TestKhiops/Standard/ | tee /tmp/khiops-log.txt
          python3 apply_command.py errors ../../TestCoclustering/Standard/ | tee /tmp/coclustering-log.txt
          if (grep -q error /tmp/khiops-log.txt || grep -q error /tmp/coclustering-log.txt); then
            echo "::error::Errors in Khiops run"
            false
          fi
